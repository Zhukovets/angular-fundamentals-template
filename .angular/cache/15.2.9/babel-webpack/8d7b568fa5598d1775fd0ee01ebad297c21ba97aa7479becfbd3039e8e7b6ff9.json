{"ast":null,"code":"import { BehaviorSubject, finalize, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MockDataService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.charactersLoader$ = new BehaviorSubject(false);\n    this.planetsLoader$ = new BehaviorSubject(false);\n  }\n  getCharacters(searchTerm) {\n    this.charactersLoader$.next(true);\n    const queryParams = searchTerm ? `?search=${searchTerm}` : '';\n    return this.httpClient.get(`https://swapi.dev/api/people/${queryParams}`).pipe(finalize(() => this.charactersLoader$.next(false))).pipe(map(response => response.results));\n  }\n  getPlanets(searchTerm) {\n    this.planetsLoader$.next(true);\n    const queryParams = searchTerm ? `?search=${searchTerm}` : '';\n    return this.httpClient.get(`https://swapi.dev/api/planets/${queryParams}`).pipe(finalize(() => this.planetsLoader$.next(false))).pipe(map(response => response.results));\n  }\n  getCharactersLoader() {\n    return this.charactersLoader$;\n  }\n  getPlanetLoader() {\n    return this.planetsLoader$;\n  }\n}\nMockDataService.ɵfac = function MockDataService_Factory(t) {\n  return new (t || MockDataService)(i0.ɵɵinject(i1.HttpClient));\n};\nMockDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MockDataService,\n  factory: MockDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAEC,QAAQ,EAAEC,GAAG,QAAoB,MAAM;;;AAKjE,OAAM,MAAOC,eAAe;EAIxBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAHvB,sBAAiB,GAAG,IAAIL,eAAe,CAAU,KAAK,CAAC;IACvD,mBAAc,GAAG,IAAIA,eAAe,CAAU,KAAK,CAAC;EAEd;EAE7CM,aAAa,CAACC,UAAmB;IAC7B,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC;IACjC,MAAMC,WAAW,GAAWH,UAAU,GAAG,WAAWA,UAAU,EAAE,GAAG,EAAE;IACrE,OAAO,IAAI,CAACF,UAAU,CACjBM,GAAG,CAAM,gCAAgCD,WAAW,EAAE,CAAC,CACvDE,IAAI,CAACX,QAAQ,CAAC,MAAM,IAAI,CAACO,iBAAiB,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CACxDG,IAAI,CAACV,GAAG,CAAEW,QAAQ,IAAKA,QAAQ,CAACC,OAAO,CAAC,CAAC;EAClD;EAEAC,UAAU,CAACR,UAAmB;IAC1B,IAAI,CAACS,cAAc,CAACP,IAAI,CAAC,IAAI,CAAC;IAC9B,MAAMC,WAAW,GAAWH,UAAU,GAAG,WAAWA,UAAU,EAAE,GAAG,EAAE;IACrE,OAAO,IAAI,CAACF,UAAU,CACjBM,GAAG,CAAM,iCAAiCD,WAAW,EAAE,CAAC,CACxDE,IAAI,CAACX,QAAQ,CAAC,MAAM,IAAI,CAACe,cAAc,CAACP,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CACrDG,IAAI,CAACV,GAAG,CAAEW,QAAQ,IAAKA,QAAQ,CAACC,OAAO,CAAC,CAAC;EAClD;EAEAG,mBAAmB;IACf,OAAO,IAAI,CAACT,iBAAiB;EACjC;EAEAU,eAAe;IACX,OAAO,IAAI,CAACF,cAAc;EAC9B;;AA9BSb,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAgB,SAAfhB,eAAe;EAAAiB,YAFZ;AAAM","names":["BehaviorSubject","finalize","map","MockDataService","constructor","httpClient","getCharacters","searchTerm","charactersLoader$","next","queryParams","get","pipe","response","results","getPlanets","planetsLoader$","getCharactersLoader","getPlanetLoader","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Любомир\\angular-fundamentals-template\\src\\app\\mock-data.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, finalize, map, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class MockDataService {\r\n    public charactersLoader$ = new BehaviorSubject<boolean>(false);\r\n    public planetsLoader$ = new BehaviorSubject<boolean>(false);\r\n\r\n    constructor(private httpClient: HttpClient) {}\r\n\r\n    getCharacters(searchTerm?: string): Observable<any> {\r\n        this.charactersLoader$.next(true);\r\n        const queryParams: string = searchTerm ? `?search=${searchTerm}` : '';\r\n        return this.httpClient\r\n            .get<any>(`https://swapi.dev/api/people/${queryParams}`)\r\n            .pipe(finalize(() => this.charactersLoader$.next(false)))\r\n            .pipe(map((response) => response.results));\r\n    }\r\n\r\n    getPlanets(searchTerm?: string): Observable<any> {\r\n        this.planetsLoader$.next(true);\r\n        const queryParams: string = searchTerm ? `?search=${searchTerm}` : '';\r\n        return this.httpClient\r\n            .get<any>(`https://swapi.dev/api/planets/${queryParams}`)\r\n            .pipe(finalize(() => this.planetsLoader$.next(false)))\r\n            .pipe(map((response) => response.results));\r\n    }\r\n\r\n    getCharactersLoader(): Observable<boolean> {\r\n        return this.charactersLoader$;\r\n    }\r\n\r\n    getPlanetLoader(): Observable<boolean> {\r\n        return this.planetsLoader$;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}