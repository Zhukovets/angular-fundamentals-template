{"ast":null,"code":"import { combineLatest, debounceTime, filter, forkJoin, map, Subject, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./mock-data.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@app/loader/loader.component\";\nfunction AppComponent_ng_container_5_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r7.name, \" \");\n  }\n}\nfunction AppComponent_ng_container_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, AppComponent_ng_container_5_div_1_div_1_Template, 2, 1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const results_r2 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", results_r2);\n  }\n}\nfunction AppComponent_ng_container_5_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \" No results \");\n  }\n}\nfunction AppComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AppComponent_ng_container_5_div_1_Template, 2, 1, \"div\", 7);\n    i0.ɵɵtemplate(2, AppComponent_ng_container_5_ng_template_2_Template, 1, 0, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const results_r2 = ctx.ngIf;\n    const _r4 = i0.ɵɵreference(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", results_r2.length > 0)(\"ngIfElse\", _r4);\n  }\n}\nfunction AppComponent_ng_container_9_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r14 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r14.name, \" \");\n  }\n}\nfunction AppComponent_ng_container_9_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, AppComponent_ng_container_9_div_1_div_1_Template, 2, 1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const results_r9 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", results_r9);\n  }\n}\nfunction AppComponent_ng_container_9_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \" No results \");\n  }\n}\nfunction AppComponent_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AppComponent_ng_container_9_div_1_Template, 2, 1, \"div\", 7);\n    i0.ɵɵtemplate(2, AppComponent_ng_container_9_ng_template_2_Template, 1, 0, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const results_r9 = ctx.ngIf;\n    const _r11 = i0.ɵɵreference(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", results_r9.length > 0)(\"ngIfElse\", _r11);\n  }\n}\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(mockDataService) {\n      this.mockDataService = mockDataService;\n      this.searchTermByCharacters = new Subject();\n      this.isLoading = false;\n      this.subscriptions = [];\n    }\n    ngOnInit() {\n      this.initLoadingState();\n      this.initCharacterEvents();\n    }\n    changeCharactersInput(element) {\n      // 1.1. Add functionality to changeCharactersInput method. Changes searchTermByCharacters Subject value on input change.\n      const inputValue = element.target.value;\n      // YOUR CODE STARTS HERE\n      this.searchTermByCharacters.next(inputValue);\n      // YOUR CODE ENDS HERE\n    }\n\n    initCharacterEvents() {\n      // 1.2. Add API call on each user input. Use mockDataService.getCharacters - to make get request.\n      // 2. Since we don't want to spam our service add filter by input value and do not call API until a user enters at least 3 chars.\n      // 3. Add debounce to prevent API calls until user stop typing.\n      this.charactersResults$ = this.searchTermByCharacters.pipe(filter(inputValue => inputValue.length >= 3), debounceTime(300), switchMap(inputValue => this.mockDataService.getCharacters(inputValue)));\n    }\n    loadCharactersAndPlanet() {\n      // 4. On clicking the button 'Load Characters And Planets', it is necessary to process two requests and combine the results of both requests into one result array. As a result, a list with the names of the characters and the names of the planets is displayed on the screen.\n      // Your code should looks like this: this.planetAndCharactersResults$ = /* Your code */\n      // YOUR CODE STARTS HERE\n      this.planetAndCharactersResults$ = forkJoin({\n        characters: this.mockDataService.getCharacters(),\n        planets: this.mockDataService.getPlanets()\n      }).pipe(map(({\n        characters,\n        planets\n      }) => ({\n        characterNames: characters.map(character => character.name),\n        planetNames: planets.map(planet => planet.name)\n      })));\n      // YOUR CODE ENDS HERE\n    }\n\n    initLoadingState() {\n      /* 5.1. Let's add loader logic to our page. For each request, we have an observable that contains the state of the request. When we send a request the value is true, when the request is completed, the value becomes false. You can get value data with mockDataService.getCharactersLoader() and mockDataService.getPlanetLoader().\r\n            - Combine the value of each of the streams.\r\n      - Subscribe to changes\r\n      - Check the received value using the areAllValuesTrue function and pass them to the isLoading variable. */\n      // YOUR CODE STARTS HERE\n      const charactersLoader$ = this.mockDataService.getCharactersLoader();\n      const planetsLoader$ = this.mockDataService.getPlanetLoader();\n      const loadingStates$ = combineLatest([charactersLoader$, planetsLoader$]);\n      const loadingSubscription = loadingStates$.subscribe(loadingValues => {\n        this.isLoading = this.areAllValuesTrue(loadingValues);\n      });\n      this.subscriptions.push(loadingSubscription);\n      // YOUR CODE ENDS HERE\n    }\n\n    ngOnDestroy() {\n      // 5.2 Unsubscribe from all subscriptions\n      // YOUR CODE STARTS HERE\n      this.subscriptions.forEach(subscription => subscription.unsubscribe());\n      // YOUR CODE ENDS HERE\n    }\n\n    areAllValuesTrue(elements) {\n      return elements.every(el => el);\n    }\n  }\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.MockDataService));\n  };\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 11,\n    vars: 8,\n    consts: [[3, \"isLoading\"], [1, \"content\"], [1, \"logo\"], [\"src\", \"https://brandpalettes.com/wp-content/uploads/2021/06/star-wars-color-codes.svg\", \"width\", \"100\"], [3, \"placeholder\", \"keyup\"], [4, \"ngIf\"], [3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"noResults\", \"\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"loader\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"img\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"input\", 4);\n        i0.ɵɵlistener(\"keyup\", function AppComponent_Template_input_keyup_4_listener($event) {\n          return ctx.changeCharactersInput($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, AppComponent_ng_container_5_Template, 4, 2, \"ng-container\", 5);\n        i0.ɵɵpipe(6, \"async\");\n        i0.ɵɵelementStart(7, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_7_listener() {\n          return ctx.loadCharactersAndPlanet();\n        });\n        i0.ɵɵtext(8, \"Load Characters And Planets\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, AppComponent_ng_container_9_Template, 4, 2, \"ng-container\", 5);\n        i0.ɵɵpipe(10, \"async\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"isLoading\", ctx.isLoading);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"placeholder\", \"Search by characters\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(6, 4, ctx.charactersResults$));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 6, ctx.planetAndCharactersResults$));\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.AppLoader, i2.AsyncPipe],\n    styles: [\".content[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;text-align:center}.logo[_ngcontent-%COMP%]{display:flex;justify-content:center}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}